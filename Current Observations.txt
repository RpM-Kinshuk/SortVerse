Last Updated : September 3, 2022

>>  Below mentioned are the practically observed facts arrived upon by performing
    tests over different datasets, and the same fall close to what can be proven
    theoretically, thus testifying the weight of this project. <<

->  Counting Sort is the fastest sorting algorithm for BIG data with 
    integers within the range of [0 TO FEW 10000s] and should be strictly 
    preferred over others in the mentioned case.

->  Quick Sort (w/out any optimizations) falls behind other sorting 
    algorithms badly as data becomes more homogeneous, mainly sorted, or 
    most importantly, mainly unsorted.

->  Bubble sort with the swap count optimization works the fastest on 
    already sorted data or data with a neglible few "anomalies".

->  Insertion sort works really well with data which is mostly sorted 
    and almost on par with Bubble sort if a neglible few anomalies are
    present and hence is almost always a better alternative to Bubble 
    Sort in specific.

->  For a small dataset (few hundreds), Quick Sort takes over other 
    sorting algorithms regardless of data type and STD sort clearly 
    falls over to insertion sort itself as they perform VERY similarly.

->  For a dataset having a few thousand elements, Merge sort and Quick sort 
    perform very similarly regardless of data type.

->  Quick Sort is definitely one of the worst algorithms at handling sorted 
    data falling even behind count sort in that case.

->  Quick Sort (w/out any optimizations) breaks in case of totally unsorted 
    data with a size beyond ~ 3e4 elements.

->  Counting Sort breaks in case of data ranging roughly beyond +/-1e9 or 
    +2e9 (probably due to memory limits in an environment restricted to 4GB 
    of memory).

->  To sort a certain case of (totally) unsorted data of size 1e4, Quick Sort 
    (w/out optimizations) took 265,182 µs of time, and when doubling the same 
    data to 2e4, it took 1,022,098 µs which is really close to the theoretical 
    1,060,728 µs of time (4 times as much) it was supposed to take pertaining 
    to its worst case time complexity of O(n²).

->  Hoare Partitioning not only outperforms the last element pivot technique 
    but also the Lomuto Partitioning. The difference measured against the last
    element pivoting is about 1.1x to 1.5x difference in speed of execution,
    averaging to about 30% increase in speed which, not only being sizeable can
    make a big difference on larger datasets.
    The same optimization makes Quick Sort and Hybrid Quick Sort come on part
    with Merge Sort trading blows with it very frequently.